class Movie(+title: string, +price: Price) {}

abstract class Price {
  abstract fun amount(daysRented: int): float;
  fun points(daysRented: int): int => 1;
}

class Regular extends Price {
  fun amount(daysRented: int): float {
    var result = 2;
    if (daysRented > 2) {
      result += (daysRented - 2) * 1.5;
    }
    return result;
  }
}

class Childrens extends Price {
  fun amount(daysRented: int): float {
    var result = 1.5;
    if (daysRented > 3) {
      result += (daysRented - 3) * 1.5;
    }
    return result;
  }
}

class NewRelease extends Price {
  fun amount(daysRented: int): float => daysRented * 3;
  fun points(daysRented: int): int => daysRented > 1 ? 2 : 1;
}

class PriceFactory {
  const REGULAR = 0;
  const NEW_RELEASE = 1;
  const CHILDRENS = 2;

  fun from(priceCode: int): Price => match(priceCode) {
    REGULAR => new Regular(),
    NEW_RELEASE => new NewRelease(),
    CHILDRENS => new Childrens(),
    default => throw new DomainException("Unknown price code: " +. priceCode),
  };
}

class Rental(-movie: Movie, -daysRented: int) {
  var title = movie.title;
  fun points(): int => movie.price.points(daysRented);
  fun amount(): float => movie.price.amount(daysRented);
}

// TODO array<Rental>
class Rentals(-rentals: array) iterates rentals {
  fun totalPoints(): int {
    var result = 0;
    foreach (rentals as rental) {
      result += rental.points();
    }
    return result;
  }
  fun totalAmount(): float {
    var result = 0;
    foreach (rentals as rental) {
      result += rental.amount();
    }
    return result;
  }
  // TODO one of these
  // fun totalAmount(): float => map(fun(r: Rental) => r.amount()).reduce(fun(a, b) => a + b, 0);
  // fun totalAmount(): float => map(fun(r: Rental) => r.amount()).sum()
  // fun totalAmount(): float => rentals#array_map(fun(r: Rental) => r.amount())#array_sum()
  // fun totalAmount(): float => rentals#map(fun(r: Rental) => r.amount())#sum()

}

class Customer(-name: string, -rentals: Rentals) {
  fun statement(): string {
    // TODO `` or "" string interpolation: var result = `Rental Record for $name\n`;
    var result = "Rental Record for " +. name +. "\n";
    foreach (rentals as rental) {
      // result +.= `\t${rental.title}\t${rental.amount()}\n`;
      result +.= "\t" +. rental.title +. "\t" +. rental.amount() +. "\n";
    }
    // result +.= `Amount owed is ${rentals.totalAmount()}\n`;
    result +.= "Amount owed is " +. rentals.totalAmount() +. "\n";
    // result +.= `You earned ${rentals.totalPoints()} frequent renter points\n`;
    result +.= "You earned " +. rentals.totalPoints() +.  " frequent renter points\n";
    return result;
  }
}

// TODO build from a raw dataset with array access operator
var priceFactory = new PriceFactory();
var rentals = array(
  new Rental(
    new Movie(
      "Prognosis Negative",
      priceFactory.from(PriceFactory::NEW_RELEASE),
    ),
    3,
  ),
  new Rental(
    new Movie(
      "The Pain and the Yearning",
      priceFactory.from(PriceFactory::REGULAR),
    ),
    1,
  ),
  new Rental(
    new Movie(
      "Sack Lunch",
      priceFactory.from(PriceFactory::CHILDRENS),
    ),
    1,
  ),
);
var customer = new Customer("Susan Ross", new Rentals(rentals));
echo customer.statement();
