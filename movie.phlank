class Movie(title: string, priceCode: int) {
  const REGULAR = 0;
  const NEW_RELEASE = 1;
  const CHILDRENS = 2;
  fun getPriceCode(): int => priceCode;
  fun getTitle(): string => title; // TODO public readonly title

  // TODO make me a factory
  // TODO use a match expression
  fun price(): Price {
    // TODO implicit self::
    if (priceCode == Movie::REGULAR) return new Regular();
    else if (priceCode == Movie::NEW_RELEASE) return new NewRelease();
    else if (priceCode == Movie::CHILDRENS) return new Childrens();
    return new Regular();
  }
}

abstract class Price {
  // fun amount(daysRented: int): float; // TODO abstract
  fun points(daysRented: int): int => 1;
}

class Regular extends Price {
  fun amount(daysRented: int): float {
    var result = 2;
    if (daysRented > 2) {
      result += (daysRented - 2) * 1.5;
    }
    return result;
  }
}

class Childrens extends Price {
  fun amount(daysRented: int): float {
    var result = 1.5;
    if (daysRented > 3) {
      result += (daysRented - 3) * 1.5;
    }
    return result;
  }
}

class NewRelease extends Price {
  fun amount(daysRented: int): float => daysRented * 3;
  // TODO ternaries
  fun points(daysRented: int): int {
    if (daysRented > 1) return 2;
    return 1;
  }
}

class Rental(movie: Movie, daysRented: int) {
  fun getMovie(): Movie => movie; // TODO drop me
  // var title = movie.getTitle(); // TODO
  fun points(): int => movie.price().points(daysRented);
  fun amount(): float => movie.price().amount(daysRented);
}

// TODO array<Rental>
// TODO iterates rentals for foreach
// TODO rentals.array_map(fun(r: Rental) => r.amount()).array_sum()
class Rentals(rentals: array) {
  fun getRentals(): array => rentals; // TODO array<Rental>
  fun totalPoints(): int {
    var result = 0;
    foreach (rentals as rental) {
      result += rental.points();
    }
    return result;
  }
  fun totalAmount(): float {
    var result = 0;
    foreach (rentals as rental) {
      result += rental.amount();
    }
    return result;
  }
}

class Customer(name: string, rentals: Rentals) {
  fun statement(): string {
    var result = "Rental Record for " +. name +. ":";
    foreach (rentals.getRentals() as rental) {
      result +.= rental.getMovie().getTitle() +. " " +. rental.amount() +. " ";
    }
    result +.= "Amount owed is " +. rentals.totalAmount() +. ". ";
    result +.= "You earned " +. rentals.totalPoints() +.  " frequent renter points";
    return result;
  }
}

var prognosisNegative = new Movie("Prognosis Negative", Movie::NEW_RELEASE);
var sackLunch = new Movie("Sack Lunch", Movie::CHILDRENS);
var painAndYearning = new Movie("The Pain and the Yearning", Movie::REGULAR);
var rentals = new Rentals(array(
  new Rental(prognosisNegative, 3),
  new Rental(painAndYearning, 1),
  new Rental(sackLunch, 1),
));
var customer = new Customer("Susan Ross", rentals);
echo customer.statement();
